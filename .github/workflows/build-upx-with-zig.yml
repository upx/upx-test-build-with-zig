name: 'Build UPX with zig cc'

on:
  push:
  workflow_dispatch:

env:
  ZIG_DIST_TARBALL: zig-linux-x86_64-0.10.0-dev.4576+d42a719e8 # 2022-10-26

# NOTE: we could work-around some failing builds by adding extra compilation
# flags, but the point of this test repository is to ensure that zig-cc
# just works "out of the box".

jobs:
  job-build-upx-with-zig:
    name: ${{ format('{0} {1}', matrix.zig_target, matrix.zig_pic) }}
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        include:
          # 78 jobs
          # linux-musl (statically linked, can use qemu-user for testing)
          - { zig_target: aarch64-linux-musl, qemu: qemu-aarch64 }
          - { zig_target: aarch64-linux-musl, qemu: qemu-aarch64, zig_pic: -fPIE }
          - { zig_target: aarch64_be-linux-musl, qemu: qemu-aarch64_be }
          - { zig_target: aarch64_be-linux-musl, qemu: qemu-aarch64_be, zig_pic: -fPIE }
          - { zig_target: arm-linux-musleabi, qemu: qemu-arm }
          - { zig_target: arm-linux-musleabi, qemu: qemu-arm, zig_pic: -fPIE }
          - { zig_target: arm-linux-musleabihf, qemu: qemu-arm }
          - { zig_target: arm-linux-musleabihf, qemu: qemu-arm, zig_pic: -fPIE }
          - { zig_target: armeb-linux-musleabi, qemu: qemu-armeb }
          - { zig_target: armeb-linux-musleabi, qemu: qemu-armeb, zig_pic: -fPIE }
          - { zig_target: armeb-linux-musleabihf, qemu: qemu-armeb }
          - { zig_target: armeb-linux-musleabihf, qemu: qemu-armeb, zig_pic: -fPIE }
          - { zig_target: i386-linux-musl, qemu: qemu-i386 }
          - { zig_target: i386-linux-musl, qemu: qemu-i386, zig_pic: -fPIE }
          - { zig_target: m68k-linux-musl, qemu: qemu-m68k, tt: bash }
          - { zig_target: m68k-linux-musl, qemu: qemu-m68k, tt: bash, zig_pic: -fPIE }
          - { zig_target: mips-linux-musl, qemu: qemu-mips }
          - { zig_target: mips-linux-musl, qemu: qemu-mips, zig_pic: -fPIE }
          - { zig_target: mipsel-linux-musl, qemu: qemu-mipsel }
          - { zig_target: mipsel-linux-musl, qemu: qemu-mipsel, zig_pic: -fPIE }
          - { zig_target: mips64-linux-musl, qemu: qemu-mips64, tt: bash }
          - { zig_target: mips64-linux-musl, qemu: qemu-mips64, tt: bash, zig_pic: -fPIE }
          - { zig_target: mips64el-linux-musl, qemu: qemu-mips64el, tt: bash }
          - { zig_target: mips64el-linux-musl, qemu: qemu-mips64el, tt: bash, zig_pic: -fPIE }
          - { zig_target: powerpc-linux-musl, qemu: qemu-ppc }
          - { zig_target: powerpc-linux-musl, qemu: qemu-ppc, zig_pic: -fPIE }
          - { zig_target: powerpc64-linux-musl, qemu: qemu-ppc64 }
          - { zig_target: powerpc64-linux-musl, qemu: qemu-ppc64, zig_pic: -fPIE }
          - { zig_target: powerpc64le-linux-musl, qemu: qemu-ppc64le }
          - { zig_target: powerpc64le-linux-musl, qemu: qemu-ppc64le, zig_pic: -fPIE }
          - { zig_target: riscv64-linux-musl, qemu: qemu-riscv64, tt: bash }
          - { zig_target: riscv64-linux-musl, qemu: qemu-riscv64, tt: bash, zig_pic: -fPIE }
          - { zig_target: s390x-linux-musl, qemu: qemu-s390x, tt: bash }
          - { zig_target: s390x-linux-musl, qemu: qemu-s390x, tt: bash, zig_pic: -fPIE }
          - { zig_target: x86_64-linux-musl, qemu: qemu-x86_64 -cpu Westmere }
          - { zig_target: x86_64-linux-musl, qemu: qemu-x86_64 -cpu Westmere, zig_pic: -fPIE }
          # other
          - { zig_target: aarch64-linux-gnu }
          - { zig_target: aarch64-macos.11-none }
          - { zig_target: aarch64-macos.12-none }
          - { zig_target: aarch64-windows-gnu }
          - { zig_target: aarch64_be-linux-gnu }
          - { zig_target: arm-linux-gnueabi }
          - { zig_target: arm-linux-gnueabihf }
          - { zig_target: arm-windows-gnu }
          - { zig_target: armeb-linux-gnueabi }
          - { zig_target: armeb-linux-gnueabihf }
          - { zig_target: i386-linux-gnu }
          - { zig_target: i386-linux-gnu.2.3.4 }              # RHEL 4
          - { zig_target: i386-linux-gnu.2.7 }                # Ubuntu 8.04
          - { zig_target: i386-windows-gnu, wine: wine32 }
          - { zig_target: m68k-linux-gnu }
          - { zig_target: mips-linux-gnueabi }
          - { zig_target: mips-linux-gnueabihf }
          - { zig_target: mipsel-linux-gnueabi }
          - { zig_target: mipsel-linux-gnueabihf }
          - { zig_target: mips64-linux-gnuabi64 }
          - { zig_target: mips64el-linux-gnuabi64 }
          - { zig_target: powerpc-linux-gnueabi }
          - { zig_target: powerpc64-linux-gnu }
          - { zig_target: powerpc64le-linux-gnu }
          - { zig_target: riscv64-linux-gnu }
          - { zig_target: s390x-linux-gnu }
          - { zig_target: sparc-linux-gnu }
          - { zig_target: sparc64-linux-gnu }
          - { zig_target: x86_64-linux-gnu }
          - { zig_target: x86_64-linux-gnu.2.3.4 }            # RHEL 4
          - { zig_target: x86_64-linux-gnu.2.5 }              # RHEL 5
          - { zig_target: x86_64-linux-gnu.2.11 }             # RHEL 6, SLES 11
          - { zig_target: x86_64-linux-gnu.2.17 }             # RHEL 7
          - { zig_target: x86_64-macos.10-none }
          - { zig_target: x86_64-macos.11-none }
          - { zig_target: x86_64-macos.12-none }
          - { zig_target: x86_64-windows-gnu, wine: wine64 }
          # ILP32 on 64-bit archs
          - { zig_target: mips64-linux-gnuabin32 }
          - { zig_target: mips64el-linux-gnuabin32 }
          - { zig_target: x86_64-linux-gnux32 }
          - { zig_target: x86_64-linux-muslx32 }              # not supported by Zig ??
          - { zig_target: x86_64-linux-muslx32, zig_pic: -fPIE }

    env:
      # for zig-cc wrapper scripts (see below):
      ##ZIG_CPPFLAGS: -DUPX_DOCTEST_CONFIG_MULTITHREADING # TODO: enable this once other issues are fixed
      ZIG_FLAGS: ${{ matrix.zig_flags }}
      ZIG_PIC: ${{ matrix.zig_pic }}
      ZIG_TARGET: ${{ matrix.zig_target }}
      # for upx.git cloning:
      UPX_REF_NAME: devel4
      # for upx.git top-level Makefile when building with clang/gcc:
      UPX_CMAKE_BUILD_FLAGS: --verbose
      # for running the basic tests under QEMU/Wine:
      UPX: --no-color --no-progress
      UPX_DEBUG_DISABLE_GITREV_WARNING: 1
      UPX_DEBUG_DOCTEST_VERBOSE: 0

    steps:
      - name: 'Install system packages'
        run: |
          uname -a; pwd; id; umask
          export DEBIAN_FRONTEND=noninteractive
          [[ -n '${{ matrix.qemu }}' ]] && sudo apt-get install -y --no-install-recommends qemu-user
          [[ -n '${{ matrix.wine }}' ]] && sudo apt-get install -y --no-install-recommends wine
          true

      # note that ~/.local/bin is included in the default $PATH on Ubuntu
      - name: ${{ format('Install Zig {0}', env.ZIG_DIST_TARBALL) }}
        run: |
          mkdir -p -v ~/.local/bin
          cd ~/.local/bin
          wget -q 'https://ziglang.org/builds/'${ZIG_DIST_TARBALL}.tar.xz
          tar -xJf ${ZIG_DIST_TARBALL}.tar.xz
          rm ${ZIG_DIST_TARBALL}.tar.xz
          ln -s -v $(readlink -ef ${ZIG_DIST_TARBALL}/zig) .
          zig version
          # create wrapper scripts (needed for CMake)
          echo -e '#!/bin/sh\nexec zig ar "$@"' > zig-ar
          echo -e '#!/bin/sh\nexec zig cc  -target $ZIG_TARGET $ZIG_PIC $ZIG_FLAGS $ZIG_CPPFLAGS $ZIG_CFLAGS   "$@"' > zig-cc
          echo -e '#!/bin/sh\nexec zig c++ -target $ZIG_TARGET $ZIG_PIC $ZIG_FLAGS $ZIG_CPPFLAGS $ZIG_CXXFLAGS "$@"' > zig-cxx
          echo -e '#!/bin/sh\nexec zig ranlib "$@"' > zig-ranlib
          chmod +x zig-ar zig-cc zig-cxx zig-ranlib
          ls -la; head zig-ar zig-cc zig-cxx zig-ranlib

      - name: ${{ format('Check out UPX {0} source code', env.UPX_REF_NAME) }}
        run: |
          git clone --branch $UPX_REF_NAME --depth 1 https://github.com/upx/upx upx
          git -C upx submodule update --init
          # GitHub Actions magic: set "UPX_GITREV_SHORT" environment value for use in steps below
          rev=$(git -C upx rev-parse --short=7 HEAD)
          echo "UPX_GITREV_SHORT=$rev" >> $GITHUB_ENV

      - name: 'Build with local clang and gcc'
        if: ${{ matrix.zig_target == 'x86_64-linux-gnu' }} # only do this once per Action
        run: |
          make -C upx build/release-clang && make -C upx/build/release-clang test
          make -C upx build/debug-clang   && make -C upx/build/debug-clang test
          make -C upx build/release-gcc   && make -C upx/build/release-gcc test
          make -C upx build/debug-gcc     && make -C upx/build/debug-gcc test

      # CMAKE_AR needs to be an absolute file path; CMake bug?
      - name: ${{ format('Build Release with zig-cc -target {0} {1}', matrix.zig_target, matrix.zig_pic) }}
        run: |
          mkdir -p upx/build/zig/${ZIG_TARGET}${ZIG_PIC}/release
          cd       upx/build/zig/${ZIG_TARGET}${ZIG_PIC}/release
          cmake ../../../.. -DCMAKE_BUILD_TYPE=Release -DCMAKE_AR=$HOME/.local/bin/zig-ar -DCMAKE_C_COMPILER=zig-cc -DCMAKE_CXX_COMPILER=zig-cxx
          cmake --build . --config Release --parallel --verbose
          file ./upx*

      - name: ${{ format('Build Debug with zig-cc -target {0} {1}', matrix.zig_target, matrix.zig_pic) }}
        run: |
          mkdir -p upx/build/zig/${ZIG_TARGET}${ZIG_PIC}/debug
          cd       upx/build/zig/${ZIG_TARGET}${ZIG_PIC}/debug
          cmake ../../../.. -DCMAKE_BUILD_TYPE=Debug -DCMAKE_AR=$HOME/.local/bin/zig-ar -DCMAKE_C_COMPILER=zig-cc -DCMAKE_CXX_COMPILER=zig-cxx
          cmake --build . --config Debug --parallel --verbose
          file ./upx*

      - name: ${{ format('Make artifact from upx-{0}-{1}', env.UPX_REF_NAME, env.UPX_GITREV_SHORT) }}
        run: |
          cd upx
          N=upx-zigcc-${GITHUB_REF_NAME}-${GITHUB_SHA:0:7}-${ZIG_TARGET}${ZIG_PIC}
          xbuild=build-upx-${UPX_REF_NAME}-${UPX_GITREV_SHORT}
          mkdir -p "tmp/artifact/$N/$xbuild"
          (cd build && shopt -s nullglob && cp -ai --parents */upx* zig/*/*/upx* "../tmp/artifact/$N/$xbuild")
          (cd tmp/artifact && tar --sort=name -czf "$N.tar.gz" "$N" && rm -rf "./$N")
          # GitHub Actions magic: set "artifact_name" environment value for use in next step
          echo "artifact_name=$N" >> $GITHUB_ENV

      - name: ${{ format('Upload artifact {0}', env.artifact_name) }}
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.artifact_name }}
          path: upx/tmp/artifact

      - name: 'Run basic tests under QEMU - Release'
        if: ${{ matrix.qemu != '' }}
        run: |
          set -ex -o pipefail
          cd upx/build/zig/${ZIG_TARGET}${ZIG_PIC}/release
          file ./upx
          qemu='${{ matrix.qemu }}'
          tt='${{ matrix.tt }}'
          [[ $tt == bash ]] && tt=/bin/bash
          [[ -z $tt ]] && tt=./upx
          $qemu ./upx --version-short
          $qemu ./upx -3 $tt -o tt.packed
          $qemu ./upx -l tt.packed
          $qemu ./upx -t tt.packed
          $qemu ./upx -d tt.packed -o tt.unpacked
          [[ $tt == ./upx ]] && $qemu ./tt.packed --version-short
          [[ $tt == ./upx ]] && $qemu ./tt.unpacked --version-short
          true

      - name: 'Run basic tests under QEMU - Debug'
        if: ${{ matrix.qemu != '' }}
        run: |
          set -ex -o pipefail
          cd upx/build/zig/${ZIG_TARGET}${ZIG_PIC}/debug
          file ./upx
          qemu='${{ matrix.qemu }}'
          tt='${{ matrix.tt }}'
          [[ $tt == bash ]] && tt=/bin/bash
          [[ -z $tt ]] && tt=./upx
          $qemu ./upx --version-short
          $qemu ./upx -3 $tt -o tt.packed
          $qemu ./upx -l tt.packed
          $qemu ./upx -t tt.packed
          $qemu ./upx -d tt.packed -o tt.unpacked
          [[ $tt == ./upx ]] && $qemu ./tt.packed --version-short
          [[ $tt == ./upx ]] && $qemu ./tt.unpacked --version-short
          true

      - name: 'Run basic tests under Wine - Release'
        if: ${{ matrix.wine != '' }}
        run: |
          set -ex -o pipefail
          cd upx/build/zig/${ZIG_TARGET}${ZIG_PIC}/release
          [[ -f upx && ! -f upx.exe ]] && mv -i -v upx upx.exe
          file ./upx.exe
          wine='${{ matrix.wine }}'
          $wine ./upx.exe --version-short
          # TODO: add more tests once this is building

      - name: 'Run basic tests under Wine - Debug'
        if: ${{ matrix.wine != '' }}
        run: |
          set -ex -o pipefail
          cd upx/build/zig/${ZIG_TARGET}${ZIG_PIC}/debug
          [[ -f upx && ! -f upx.exe ]] && mv -i -v upx upx.exe
          file ./upx.exe
          wine='${{ matrix.wine }}'
          $wine ./upx.exe --version-short
          # TODO: add more tests once this is building
