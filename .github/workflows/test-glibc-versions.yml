# Copyright (C) Markus Franz Xaver Johannes Oberhumer

name: 'Test glibc versions'

# info: run workflow manually from GitHub Actions web page
on: [workflow_dispatch]

env:
  CMAKE_REQUIRED_QUIET: 'OFF'
  CMAKE_VERBOSE_MAKEFILE: 'ON'
  CTEST_OUTPUT_ON_FAILURE: 'ON'
  DEBIAN_FRONTEND: noninteractive
  NO_COLOR: 1
  UPX_CMAKE_BUILD_FLAGS: --verbose
  UPX_CMAKE_CONFIG_FLAGS: -Wdev --warn-uninitialized
  UPX_DEBUG_TEST_FLOAT_DIVISION_BY_ZERO: 1
  UPX_DEBUG_TEST_LIBC_QSORT: 1

jobs:
  job-build-on-linux:
    # if: github.repository_owner == 'upx'
    name: ${{ format('{0} / {1}', matrix.zig_target, matrix.zig_dist_version) }}
    runs-on: ubuntu-latest # this is currently ubuntu-22.04 with host glibc-2.35
    strategy:
      fail-fast: false
      matrix:
        zig_target:
          # i386-linux-gnu
          - i386-linux-gnu.2.3.3                # oldest glibc version that works with current libc++
          - i386-linux-gnu.2.3.4                # RHEL 4
          - i386-linux-gnu.2.4                  #
          - i386-linux-gnu.2.5                  # RHEL 5, manylinux1
          - i386-linux-gnu.2.7                  # Ubuntu 8.04 LTS
          - i386-linux-gnu.2.11                 # SLES 11
          - i386-linux-gnu.2.12                 # RHEL 6, manylinux2010
          - i386-linux-gnu.2.15                 #
          - i386-linux-gnu.2.16                 # aligned_alloc()
          - i386-linux-gnu.2.17                 # RHEL 7, manylinux2014
          - i386-linux-gnu.2.18                 # __cxa_thread_atexit_impl (needed for libc++ multithreading)
          - i386-linux-gnu.2.24                 # Debian 9
          - i386-linux-gnu.2.28                 # RHEL 8, Debian 10, manylinux_2_28
          - i386-linux-gnu.2.31                 # Ubuntu 20.04 LTS
          - i386-linux-gnu.2.34                 # RHEL 9
          - i386-linux-gnu.2.35                 # Ubuntu 22.04 LTS
          - i386-linux-gnu.2.38                 # latest glibc version supported by zig
          # x86_64-linux-gnu
          - x86_64-linux-gnu.2.3.3              # oldest glibc version that works with current libc++
          - x86_64-linux-gnu.2.3.4              # RHEL 4
          - x86_64-linux-gnu.2.4                #
          - x86_64-linux-gnu.2.5                # RHEL 5, manylinux1
          - x86_64-linux-gnu.2.7                # Ubuntu 8.04 LTS
          - x86_64-linux-gnu.2.11               # SLES 11
          - x86_64-linux-gnu.2.12               # RHEL 6, manylinux2010
          - x86_64-linux-gnu.2.15               #
          - x86_64-linux-gnu.2.16               # aligned_alloc()
          - x86_64-linux-gnu.2.17               # RHEL 7, manylinux2014
          - x86_64-linux-gnu.2.18               # __cxa_thread_atexit_impl (needed for libc++ multithreading)
          - x86_64-linux-gnu.2.24               # Debian 9
          - x86_64-linux-gnu.2.28               # RHEL 8, Debian 10, manylinux_2_28
          - x86_64-linux-gnu.2.31               # Ubuntu 20.04 LTS
          - x86_64-linux-gnu.2.34               # RHEL 9
          - x86_64-linux-gnu.2.35               # Ubuntu 22.04 LTS
          - x86_64-linux-gnu.2.38               # latest glibc version supported by zig
        zig_dist_version:
          # 0.11.0-dev.2401+348751462           # 2023-04-07 llvm-15.0.7; last llvm-15
          # 0.12.0-dev.415+5af5d87ad            # 2023-09-19 llvm-16.0.6; last llvm-16
          # 2024-04-10 llvm-17.0.6; current llvm-17
          - 0.12.0-dev.3610+9d27f34d0

    env:
      ZIG_DIST_VERSION: ${{ matrix.zig_dist_version }}
      UPX_CONFIG_EXPECT_THREADS: 'ON'
      # for zig-cc wrapper scripts (see below):
      CC: zig-cc
      CXX: zig-cxx
      ZIG_CPPFLAGS: -DUPX_DOCTEST_CONFIG_MULTITHREADING # (enabled on glibc by default)
      ZIG_FLAGS: ${{ matrix.zig_flags }}
      ZIG_PIC: ${{ matrix.zig_pic }}
      ZIG_TARGET: ${{ matrix.zig_target }}
      # for upx.git cloning:
      UPX_REF_NAME: devel
      # for running the basic tests
      UPX: --no-color --no-progress
      UPX_DEBUG_DISABLE_GITREV_WARNING: 1
      UPX_DEBUG_DOCTEST_VERBOSE: 0

    steps:
      # note that ~/.local/bin is included in the default $PATH on Ubuntu
      - name: ${{ format('Install Zig {0}', env.ZIG_DIST_VERSION) }}
        shell: bash
        run: |
          mkdir -p -v ~/.local/bin
          cd ~/.local/bin
          ZIG_DIST_NAME=zig-linux-x86_64-${ZIG_DIST_VERSION}
          wget -q https://ziglang.org/builds/${ZIG_DIST_NAME}.tar.xz
          ls -l ${ZIG_DIST_NAME}.tar.xz
          tar -xoJf ${ZIG_DIST_NAME}.tar.xz
          rm ${ZIG_DIST_NAME}.tar.xz
          ln -s -v ${ZIG_DIST_NAME}/zig zig
          #echo "PATH=$PATH" && which zig
          echo -n 'zig version: '; zig version
          # create wrapper scripts (needed for CMake)
          log=
          log='set -x\n'
          echo -e '#!/bin/sh\n'$log'exec zig ar "$@"' > zig-ar
          echo -e '#!/bin/sh\n'$log'exec zig cc  -target $ZIG_TARGET $ZIG_PIC $ZIG_FLAGS $ZIG_CPPFLAGS $ZIG_CFLAGS   "$@"' > zig-cc
          echo -e '#!/bin/sh\n'$log'exec zig c++ -target $ZIG_TARGET $ZIG_PIC $ZIG_FLAGS $ZIG_CPPFLAGS $ZIG_CXXFLAGS "$@"' > zig-cxx
          echo -e '#!/bin/sh\n'$log'exec zig ranlib "$@"' > zig-ranlib
          chmod +x zig-ar zig-cc zig-cxx zig-ranlib
          ls -la; head zig-ar zig-cc zig-cxx zig-ranlib
          # update ZIG_TARGET (i386 => x86)
          ZIG_TARGET=${ZIG_TARGET/i386-/x86-}
          echo "ZIG_TARGET=$ZIG_TARGET" >> $GITHUB_ENV
          #
          if [[ $ZIG_TARGET == *-linux-gnu.2.3.3 ]]; then true;
            # glibc-2.3.3: undefined symbols in Debug build: __snprintf_chk __vsnprintf_chk
            echo "UPX_CONFIG_DISABLE_SANITIZE=ON" >> $GITHUB_ENV
            echo "ZIG_FLAGS=$ZIG_FLAGS -fno-sanitize=all" >> $GITHUB_ENV
          fi

      - name: ${{ format('Check out UPX {0} source code', env.UPX_REF_NAME) }}
        run: |
          git clone --branch $UPX_REF_NAME --depth 1 https://github.com/upx/upx .
          git submodule update --init
          # GitHub Actions magic: set "UPX_GITREV_SHORT" environment value for use in steps below
          rev=$(git rev-parse --short=7 HEAD)
          echo "UPX_GITREV_SHORT=$rev" >> $GITHUB_ENV

      - name: ${{ format('Build Release with zig-cc -target {0} {1}', env.ZIG_TARGET, env.ZIG_PIC) }}
        run: |
          make UPX_XTARGET=zig/${ZIG_TARGET}${ZIG_PIC} xtarget/release \
            CC="zig-cc" CXX="zig-cxx" CMAKE_AR="$HOME/.local/bin/zig-ar" CMAKE_RANLIB="$HOME/.local/bin/zig-ranlib"
          file build/zig/${ZIG_TARGET}${ZIG_PIC}/release/upx*

      - name: ${{ format('Build Debug with zig-cc -target {0} {1}', env.ZIG_TARGET, env.ZIG_PIC) }}
        if: success() || failure() # run this step even if the previous step failed
        run: |
          make UPX_XTARGET=zig/${ZIG_TARGET}${ZIG_PIC} xtarget/debug \
           CC="zig-cc" CXX="zig-cxx" CMAKE_AR="$HOME/.local/bin/zig-ar" CMAKE_RANLIB="$HOME/.local/bin/zig-ranlib"
          file build/zig/${ZIG_TARGET}${ZIG_PIC}/debug/upx*

      - name: ${{ format('Make artifact from upx-{0}-{1}', env.UPX_REF_NAME, env.UPX_GITREV_SHORT) }}
        shell: bash
        run: |
          N=$(echo "upx-${GITHUB_REF_NAME}-${GITHUB_SHA:0:7}-zigcc-${{ matrix.zig_target }}${ZIG_PIC}--${ZIG_DIST_VERSION}" | sed 's/[^0-9a-zA-Z_.+-]/-/g')
          xbuild=$(echo "build-upx-${UPX_REF_NAME}-${UPX_GITREV_SHORT}" | sed 's/[^0-9a-zA-Z_.+-]/-/g')
          mkdir -p "tmp/artifact/$N/$xbuild"
          (cd build && shopt -s nullglob && cp -ai --parents */upx* zig/*/*/upx* "../tmp/artifact/$N/$xbuild")
          (cd tmp/artifact && tar --sort=name -czf "$N.tar.gz" "$N" && rm -rf "./$N")
          # GitHub Actions magic: set "artifact_name" environment value for use in next step
          echo "artifact_name=$N" >> $GITHUB_ENV

      - name: ${{ format('Upload artifact {0}', env.artifact_name) }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.artifact_name }}
          path: tmp/artifact

      - name: 'Run basic tests'
        # info: glibc-2.38 cannot run on Ubuntu-22.04 GitHub runner host (glibc-2.35)
        if: ${{ !endsWith(matrix.zig_target, '-linux-gnu.2.38') }}
        run: |
          UPX_DEBUG_DOCTEST_VERBOSE=1 ./build/zig/${ZIG_TARGET}${ZIG_PIC}/debug/upx --sysinfo -v
          make -C build/zig/${ZIG_TARGET}${ZIG_PIC}/debug test
          make -C build/zig/${ZIG_TARGET}${ZIG_PIC}/release test
