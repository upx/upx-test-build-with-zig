# Copyright (C) Markus Franz Xaver Johannes Oberhumer

name: 'Test glibc versions'

# info: run workflow manually from GitHub Actions web page
on: [workflow_dispatch]

defaults: { run: { shell: bash } }

env:
  CMAKE_REQUIRED_QUIET: 'OFF'
  CMAKE_VERBOSE_MAKEFILE: 'ON'
  CTEST_OUTPUT_ON_FAILURE: 'ON'
  DEBIAN_FRONTEND: noninteractive
  NO_COLOR: 1
  UPX_CMAKE_BUILD_FLAGS: --verbose
  UPX_CMAKE_CONFIG_FLAGS: -Wdev --warn-uninitialized
  UPX_CONFIG_HAVE_WORKING_BUILD_RPATH: 'ON'
  UPX_DEBUG_TEST_FLOAT_DIVISION_BY_ZERO: 1
  UPX_DEBUG_TEST_LIBC_QSORT: 1
  ZSTD_CLEVEL: 17
  # for upx.git cloning:
  #REMOTE_REF_NAME: devel
  #REMOTE_REPOSITORY: upx/upx
  REMOTE_REF_NAME: test-threads
  REMOTE_REPOSITORY: upx/upx-test-threads
  REMOTE_SERVER_URL: https://github.com
  # 2025-07-30
  ZIG_DIST_VERSION: 0.15.0-dev.1283+1fcaf90dd
  # 0.11.0-dev.2401+348751462           # 2023-04-07 llvm-15.0.7; last llvm-15
  # 0.12.0-dev.415+5af5d87ad            # 2023-09-19 llvm-16.0.6; last llvm-16
  # 0.12.0                              # 2024-04-20 llvm-17.0.6
  # 0.13.0-dev.75+5c9eb4081             # 2024-05-08 llvm-17.0.6; last llvm-17
  # 0.13.0                              # 2024-06-07 llvm-18.1.6
  # 0.14.0                              # 2025-03-05 llvm-19.1.7
  # 0.15.0-dev.208+8acedfd5b            # 2025-04-05 llvm-19.1.7; last llvm-19

jobs:
  job-build-on-linux:
    # if: github.repository_owner == 'upx'
    name: ${{ format('{0}', matrix.zig_target) }}
    runs-on: ubuntu-latest
    container: 'ubuntu:24.04' # host glibc-2.39
    strategy:
      fail-fast: false
      matrix:
        zig_target:

          # i386-linux-gnu
          - i386-linux-gnu.2.3.3                # oldest glibc version that works with current libc++
          - i386-linux-gnu.2.3.4                # RHEL 4
          # i386-linux-gnu.2.3.5                #
          # i386-linux-gnu.2.3.6                #
          - i386-linux-gnu.2.4                  #
          - i386-linux-gnu.2.5                  # RHEL 5, manylinux1
          - i386-linux-gnu.2.6                  #
          - i386-linux-gnu.2.7                  # Ubuntu 8.04 LTS
          - i386-linux-gnu.2.8                  #
          - i386-linux-gnu.2.9                  #
          - i386-linux-gnu.2.10                 #
          - i386-linux-gnu.2.11                 # SLES 11, Fedora 12
          - i386-linux-gnu.2.12                 # RHEL 6, manylinux2010
          - i386-linux-gnu.2.15                 #
          - i386-linux-gnu.2.16                 # aligned_alloc()
          - i386-linux-gnu.2.17                 # RHEL 7, manylinux2014
          - i386-linux-gnu.2.18                 # __cxa_thread_atexit_impl (needed for libc++ multithreading)
          - i386-linux-gnu.2.24                 # Debian 9, manylinux_2_24
          - i386-linux-gnu.2.28                 # RHEL 8, Debian 10, manylinux_2_28
          - i386-linux-gnu.2.31                 # Debian 11, Ubuntu 20.04 LTS
          - i386-linux-gnu.2.34                 # RHEL 9
          - i386-linux-gnu.2.35                 # Ubuntu 22.04 LTS
          - i386-linux-gnu.2.36                 # Debian 12
          - i386-linux-gnu.2.39                 # RHEL 10, Ubuntu 24.04 LTS
          - i386-linux-gnu.2.40                 #
          - i386-linux-gnu.2.41                 # latest glibc version supported by zig

          # x86_64-linux-gnu
          - x86_64-linux-gnu.2.3.3              # oldest glibc version that works with current libc++
          - x86_64-linux-gnu.2.3.4              # RHEL 4
          # x86_64-linux-gnu.2.3.5              #
          # x86_64-linux-gnu.2.3.6              #
          - x86_64-linux-gnu.2.4                #
          - x86_64-linux-gnu.2.5                # RHEL 5, manylinux1
          - x86_64-linux-gnu.2.6                #
          - x86_64-linux-gnu.2.7                # Ubuntu 8.04 LTS
          - x86_64-linux-gnu.2.8                #
          - x86_64-linux-gnu.2.9                #
          - x86_64-linux-gnu.2.10               #
          - x86_64-linux-gnu.2.11               # SLES 11, Fedora 12
          - x86_64-linux-gnu.2.12               # RHEL 6, manylinux2010
          - x86_64-linux-gnu.2.15               #
          - x86_64-linux-gnu.2.16               # aligned_alloc()
          - x86_64-linux-gnu.2.17               # RHEL 7, manylinux2014
          - x86_64-linux-gnu.2.18               # __cxa_thread_atexit_impl (needed for libc++ multithreading)
          - x86_64-linux-gnu.2.24               # Debian 9, manylinux_2_24
          - x86_64-linux-gnu.2.28               # RHEL 8, Debian 10, manylinux_2_28
          - x86_64-linux-gnu.2.31               # Debian 11, Ubuntu 20.04 LTS
          - x86_64-linux-gnu.2.34               # RHEL 9
          - x86_64-linux-gnu.2.35               # Ubuntu 22.04 LTS
          - x86_64-linux-gnu.2.36               # Debian 12
          - x86_64-linux-gnu.2.39               # RHEL 10, Ubuntu 24.04 LTS
          - x86_64-linux-gnu.2.40               #
          - x86_64-linux-gnu.2.41               # latest glibc version supported by zig

    env:
      # for zig-cc wrapper scripts (see below):
      CC: zig-cc
      CXX: zig-cxx
      ZIG_CPPFLAGS: -DUPX_DOCTEST_CONFIG_MULTITHREADING
      ZIG_FLAGS: ${{ matrix.zig_flags }}
      ZIG_PIC: ${{ matrix.zig_pic }}
      ZIG_TARGET: ${{ matrix.zig_target }}
      # for running the tests
      UPX: --no-color --no-progress
      UPX_DEBUG_DISABLE_GITREV_WARNING: 1
      UPX_DEBUG_DOCTEST_VERBOSE: 0

    steps:
      - run: uname -a; pwd; id; umask
        shell: sh
      - name: ${{ format('Install packages {0}', 'ubuntu') }}
        if: ${{ job.container }}
        shell: sh
        run: |
          dpkg --add-architecture i386
          apt-get update && apt-get upgrade -y
          apt-get install -y --no-install-recommends bash ca-certificates cmake curl dmidecode file gdb git make ninja-build parallel patch strace sudo tar time util-linux xz-utils zstd libc6:i386
          # set PATH like in Ubuntu
          echo "PATH=$HOME/.local/bin:$PATH" >> $GITHUB_ENV
          git config --global --add safe.directory '*' # needed when running in a container
          mkdir -p ~/.parallel && : > ~/.parallel/$(echo 6305-4721 | tr 0-7 leticlwi)

      - run: (sudo dmidecode | sed -n -e '/System Information/,/^$/p') || true

      - name: ${{ format('Check out UPX {0} source code', env.REMOTE_REF_NAME) }}
        run: |
          git clone --branch "$REMOTE_REF_NAME" --depth 1 "$REMOTE_SERVER_URL/$REMOTE_REPOSITORY" .
          git submodule update --init
          rev=$(git rev-parse --short=7 HEAD)
          echo "UPX_GITREV_SHORT=$rev" >> $GITHUB_ENV

      # note that ~/.local/bin is included in the default $PATH on Ubuntu
      - name: ${{ format('Install Zig {0}', env.ZIG_DIST_VERSION) }}
        run: |
          mkdir -p -v ~/.local/bin
          cd ~/.local/bin
          ZIG_DIST_NAME=zig-linux-x86_64-${ZIG_DIST_VERSION}
          ZIG_DIST_NAME=zig-x86_64-linux-${ZIG_DIST_VERSION}
          curl -sS -L -O https://ziglang.org/builds/${ZIG_DIST_NAME}.tar.xz
          #curl -sS -L -O https://ziglang.org/download/0.14.1/${ZIG_DIST_NAME}.tar.xz
          ls -l ${ZIG_DIST_NAME}.tar.xz
          tar -xoJf ${ZIG_DIST_NAME}.tar.xz
          rm ${ZIG_DIST_NAME}.tar.xz
          ln -s -v ${ZIG_DIST_NAME}/zig zig
          #echo "PATH=$PATH" && which zig
          echo -n 'zig version: '; zig version
          # patch zig
          ls -la "$HOME" "$GITHUB_WORKSPACE" || true
          (cd ${ZIG_DIST_NAME} && patch --verbose -p1 -i "$GITHUB_WORKSPACE"/misc/patches/zig/0001-x.patch)
          # create wrapper scripts (needed for CMake)
          log=
          log='set -x\n'
          echo -e '#!/bin/sh\n'$log'exec zig ar "$@"' > zig-ar
          echo -e '#!/bin/sh\n'$log'exec zig cc  -target $ZIG_TARGET $ZIG_PIC $ZIG_FLAGS $ZIG_CPPFLAGS $ZIG_CFLAGS   "$@"' > zig-cc
          echo -e '#!/bin/sh\n'$log'exec zig c++ -target $ZIG_TARGET $ZIG_PIC $ZIG_FLAGS $ZIG_CPPFLAGS $ZIG_CXXFLAGS "$@"' > zig-cxx
          echo -e '#!/bin/sh\n'$log'exec zig ranlib "$@"' > zig-ranlib
          chmod +x zig-ar zig-cc zig-cxx zig-ranlib
          ls -la; head zig-ar zig-cc zig-cxx zig-ranlib
          # update ZIG_TARGET
          ZIG_TARGET=${ZIG_TARGET/i386-/x86-}    # i386 => x86
          echo "ZIG_TARGET=$ZIG_TARGET" >> $GITHUB_ENV
          # update ZIG_FLAGS
          if [[ $ZIG_TARGET == *-linux-gnu.2.3.* ]]; then true;
            # glibc-2.3.3: undefined symbols in Debug build: __snprintf_chk __vsnprintf_chk
            # glibc-2.3.4: ld.lld: error: undefined symbol: openat64
            ZIG_FLAGS="$ZIG_FLAGS -fno-sanitize=all"
            echo "UPX_CONFIG_DISABLE_SANITIZE=ON" >> $GITHUB_ENV
          fi
          if [[ $ZIG_TARGET == *-linux-gnu.2.[456789] ]]; then true;
            # glibc-2.x: ld.lld: error: undefined symbol: pwritev64
            ZIG_FLAGS="$ZIG_FLAGS -fno-sanitize=all"
            echo "UPX_CONFIG_DISABLE_SANITIZE=ON" >> $GITHUB_ENV
          fi
          if [[ $ZIG_TARGET == x86-linux-gnu.2.3.* ]]; then true;
             # i386 glibc-2.3.x: problems when linking shared libray in Debug build
             echo "UPX_CONFIG_DISABLE_SHARED_LIBS=ON" >> $GITHUB_ENV # zig problem
          fi
          echo "ZIG_FLAGS=$ZIG_FLAGS" >> $GITHUB_ENV

      - run: set -x; zig version; zig-cc --version || true; zig-cxx --version || true
      - run: zig-cc  -E -x c   -dM /dev/null # list predefined macros for C
      - run: zig-cxx -E -x c++ -dM /dev/null # list predefined macros for C++

      - name: ${{ format('Build Release with zig-cc -target {0} {1}', env.ZIG_TARGET, env.ZIG_PIC) }}
        run: |
          make UPX_XTARGET=zig/${ZIG_TARGET}${ZIG_PIC} xtarget/release \
            CC="zig-cc" CXX="zig-cxx" CMAKE_AR="$HOME/.local/bin/zig-ar" CMAKE_RANLIB="$HOME/.local/bin/zig-ranlib"

      - name: ${{ format('Build Debug with zig-cc -target {0} {1}', env.ZIG_TARGET, env.ZIG_PIC) }}
        if: success() || failure() # run this step even if the previous step failed
        run: |
          make UPX_XTARGET=zig/${ZIG_TARGET}${ZIG_PIC} xtarget/debug \
            CC="zig-cc" CXX="zig-cxx" CMAKE_AR="$HOME/.local/bin/zig-ar" CMAKE_RANLIB="$HOME/.local/bin/zig-ranlib"

      - run: ls -l build/*/*/*/upx* || true
      - run: file  build/*/*/*/upx* || true

      - name: ${{ format('Make artifact from upx-{0}-{1}', env.REMOTE_REF_NAME, env.UPX_GITREV_SHORT) }}
        run: |
          N=$(echo "upx-${GITHUB_REF_NAME}-${GITHUB_SHA:0:7}-zigcc-${{ matrix.zig_target }}${ZIG_PIC}--${ZIG_DIST_VERSION}" | sed 's/[^0-9a-zA-Z_.+-]/-/g')
          xbuild=$(echo "build-upx-${REMOTE_REF_NAME}-${UPX_GITREV_SHORT}" | sed 's/[^0-9a-zA-Z_.+-]/-/g')
          mkdir -p "tmp/artifact/$N/$xbuild"
          (cd build && shopt -s nullglob && cp -ai --parents */upx* zig/*/*/upx* "../tmp/artifact/$N/$xbuild")
          if command -v hardlink >/dev/null; then (cd "tmp/artifact/$N" && hardlink .) fi
          (cd tmp/artifact && tar --sort=name --zstd -cf "$N.tar.zst" "$N" && rm -rf "./$N" && ls -la && zstd -tq "$N.tar.zst")
          echo "artifact_name=$N" >> $GITHUB_ENV

      - name: ${{ format('Upload artifact {0}', env.artifact_name) }}
        uses: actions/upload-artifact@v4
        with: { name: '${{ env.artifact_name }}', path: tmp/artifact }

      - name: 'Run ctest tests'
        # info: glibc-2.41 cannot run on Ubuntu-24.04 GitHub runner host (glibc-2.39)
        ##if: ${{ !endsWith(matrix.zig_target, '-linux-gnu.2.41') }}
        run: |
          UPX_DEBUG_DOCTEST_VERBOSE=1 ./build/zig/${ZIG_TARGET}${ZIG_PIC}/debug/upx --sysinfo -v
          make build/zig/${ZIG_TARGET}${ZIG_PIC}/all+test
